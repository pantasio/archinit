#!/bin/bash
#-------------------------------------------------------------------------------
#Created by helmuthdu mailto: helmuthdu[at]gmail[dot]com pls change
#-------------------------------------------------------------------------------
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------------
# Run this script after your first boot with archlinux (as root)
if [[ -f `pwd`/sharedfuncs ]]; then
  source sharedfuncs
else
  echo "missing file: sharedfuncs"
  exit 1
fi

#################################################
#SOME GUI FOR WAITING BORING
install_process10(){
  echo "install process...10%"
  sleep 2
}
install_process20(){
  echo "install process...10%...20%"
  sleep 2
}
install_process30(){
  echo "install process...10%...20%...30%"
  sleep 2
}
install_process40(){
  echo "install process...10%...20%...30%...40%"
  sleep 2
}
install_process50(){
  echo "install process...10%...20%...30%...40%...50%"
  sleep 2
}
install_process60(){
  echo "install process...10%...20%...30%...40%...50%...60%"
  sleep 2
}
install_process70(){
  echo "install process...10%...20%...30%...40%...50%...60%...70%"
  sleep 2
}
install_process80(){
  echo "install process...10%...20%...30%...40%...50%...60%...70%...80%"
  sleep 2
}
install_process90(){
  echo "install process...10%...20%...30%...40%...50%...60%...70%...80%...90%"
  sleep 2
}
install_process100(){
  echo "install process...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%"
  sleep 2
}

#################################################
#ARCHLINUX INSTALL SCRIPTS MODE {{{
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#ALL FUNTION ADD HERE
#SELECT KEYMAP {{{
select_keymap(){
  print_title "KEYMAP - https://wiki.archlinux.org/index.php/KEYMAP"
  print_info "The KEYMAP variable is specified in the /etc/rc.conf file. It defines what keymap the keyboard is in the virtual consoles. Keytable files are provided by the kbd package."
  OPTION=n
  while [[ $OPTION != y ]]; do
    getkeymap
    read_input_text "Confirm keymap: $KEYMAP"
  done
  loadkeys $KEYMAP
}
#}}}
#DEFAULT EDITOR {{{
select_editor(){
  print_title "DEFAULT EDITOR"
  editors_list=("emacs" "nano" "vi" "vim" "zile");
  PS3="$prompt1"
  echo -e "Select editor\n"
  select EDITOR in "${editors_list[@]}"; do
    if contains_element "$EDITOR" "${editors_list[@]}"; then
      package_install "$EDITOR"
      break
    else
      invalid_option
    fi
  done
}
#}}}
#MIRRORLIST {{{
configure_mirrorlist(){
  local countries_code=("AU" "AT" "BY" "BE" "BR" "BG" "CA" "CL" "CN" "CO" "CZ" "DK" "EE" "FI" "FR" "DE" "GR" "HU" "IN" "IE" "IL" "IT" "JP" "KZ" "KR" "LV" "LU" "MK" "NL" "NC" "NZ" "NO" "PL" "PT" "RO" "RU" "RS" "SG" "SK" "ZA" "ES" "LK" "SE" "CH" "TW" "TR" "UA" "GB" "US" "UZ" "VN")
  local countries_name=("Australia" "Austria" "Belarus" "Belgium" "Brazil" "Bulgaria" "Canada" "Chile" "China" "Colombia" "Czech Republic" "Denmark" "Estonia" "Finland" "France" "Germany" "Greece" "Hungary" "India" "Ireland" "Israel" "Italy" "Japan" "Kazakhstan" "Korea" "Latvia" "Luxembourg" "Macedonia" "Netherlands" "New Caledonia" "New Zealand" "Norway" "Poland" "Portugal" "Romania" "Russian" "Serbia" "Singapore" "Slovakia" "South Africa" "Spain" "Sri Lanka" "Sweden" "Switzerland" "Taiwan" "Turkey" "Ukraine" "United Kingdom" "United States" "Uzbekistan" "Viet Nam")
  country_list(){
    #`reflector --list-countries | sed 's/[0-9]//g' | sed 's/^/"/g' | sed 's/,.*//g' | sed 's/ *$//g'  | sed 's/$/"/g' | sed -e :a -e '$!N; s/\n/ /; ta'`
    PS3="$prompt1"
    echo "Select your country:"
    select country_name in "${countries_name[@]}"; do
      if contains_element "$country_name" "${countries_name[@]}"; then
        contry_code=${countries_code[$(( $REPLY - 1 ))]}
        break
      else
        invalid_option
      fi
    done
  }
  print_title "MIRRORLIST - https://wiki.archlinux.org/index.php/Mirrors"
  print_info "This option is a guide to selecting and configuring your mirrors, and a listing of current available mirrors."
  OPTION=n
  while [[ $OPTION != y ]]; do
    country_list
    read_input_text "Confirm country: $country_name"
  done

  url="https://www.archlinux.org/mirrorlist/?country=${contry_code}&use_mirror_status=on"

  tmpfile=$(mktemp --suffix=-mirrorlist)

  # Get latest mirror list and save to tmpfile
  curl -so ${tmpfile} ${url}
  sed -i 's/^#Server/Server/g' ${tmpfile}

  # Backup and replace current mirrorlist file (if new file is non-zero)
  if [[ -s ${tmpfile} ]]; then
   { echo " Backing up the original mirrorlist..."
     mv -i /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.orig; } &&
   { echo " Rotating the new list into place..."
     mv -i ${tmpfile} /etc/pacman.d/mirrorlist; }
  else
    echo " Unable to update, could not download list."
  fi
  # allow global read access (required for non-root yaourt execution)
  chmod +r /etc/pacman.d/mirrorlist
  $EDITOR /etc/pacman.d/mirrorlist
}
#}}}


#CONFIGURE KEYMAP {{{
configure_keymap(){
  #ADD KEYMAP TO THE NEW SETUP
  echo "KEYMAP=$KEYMAP" > ${MOUNTPOINT}/etc/vconsole.conf
}
#}}}
#CONFIGURE FSTAB {{{
configure_fstab(){
  print_title "FSTAB - https://wiki.archlinux.org/index.php/Fstab"
  print_info "The /etc/fstab file contains static filesystem information. It defines how storage devices and partitions are to be mounted and integrated into the overall system. It is read by the mount command to determine which options to use when mounting a specific partition or partition."
  if [[ ! -f ${MOUNTPOINT}/etc/fstab.aui ]]; then
    cp ${MOUNTPOINT}/etc/fstab ${MOUNTPOINT}/etc/fstab.aui
  else
    cp ${MOUNTPOINT}/etc/fstab.aui ${MOUNTPOINT}/etc/fstab
  fi
  if [[ $UEFI -eq 1 ]]; then
    fstab_list=("DEV" "PARTUUID" "LABEL");
  else
    fstab_list=("DEV" "UUID" "LABEL");
  fi

  PS3="$prompt1"
  echo -e "Configure fstab based on:"
  select OPT in "${fstab_list[@]}"; do
    case "$REPLY" in
      1) genfstab -p ${MOUNTPOINT} >> ${MOUNTPOINT}/etc/fstab ;;
      2) if [[ $UEFI -eq 1 ]]; then
          genfstab -t PARTUUID -p ${MOUNTPOINT} >> ${MOUNTPOINT}/etc/fstab
         else
          genfstab -U -p ${MOUNTPOINT} >> ${MOUNTPOINT}/etc/fstab
         fi
         ;;
      3) genfstab -L -p ${MOUNTPOINT} >> ${MOUNTPOINT}/etc/fstab ;;
      *) invalid_option ;;
    esac
    [[ -n $OPT ]] && break
  done
  echo "Review your fstab"
  [[ -f ${MOUNTPOINT}/swapfile ]] && sed -i "s/\\${MOUNTPOINT}//" ${MOUNTPOINT}/etc/fstab
  pause_function
  $EDITOR ${MOUNTPOINT}/etc/fstab
}
#}}}
#CONFIGURE HOSTNAME {{{
configure_hostname(){
  print_title "HOSTNAME - https://wiki.archlinux.org/index.php/HOSTNAME"
  print_info "A host name is a unique name created to identify a machine on a network.Host names are restricted to alphanumeric characters.\nThe hyphen (-) can be used, but a host name cannot start or end with it. Length is restricted to 63 characters."
  read -p "Hostname [ex: archlinux]: " host_name
  echo "$host_name" > ${MOUNTPOINT}/etc/hostname
  if [[ ! -f ${MOUNTPOINT}/etc/hosts.aui ]]; then
    cp ${MOUNTPOINT}/etc/hosts ${MOUNTPOINT}/etc/hosts.aui
  else
    cp ${MOUNTPOINT}/etc/hosts.aui ${MOUNTPOINT}/etc/hosts
  fi
  arch_chroot "sed -i '/127.0.0.1/s/$/ '${host_name}'/' /etc/hosts"
  arch_chroot "sed -i '/::1/s/$/ '${host_name}'/' /etc/hosts"
}
#}}}
#CONFIGURE TIMEZONE {{{
configure_timezone(){
  print_title "TIMEZONE - https://wiki.archlinux.org/index.php/Timezone"
  print_info "In an operating system the time (clock) is determined by four parts: Time value, Time standard, Time Zone, and DST (Daylight Saving Time if applicable)."
  OPTION=n
  while [[ $OPTION != y ]]; do
    settimezone
    read_input_text "Confirm timezone (${ZONE}/${SUBZONE})"
  done
  arch_chroot "ln -s /usr/share/zoneinfo/${ZONE}/${SUBZONE} /etc/localtime"
}
#}}}
#CONFIGURE HARDWARECLOCK {{{
configure_hardwareclock(){
  print_title "HARDWARE CLOCK TIME - https://wiki.archlinux.org/index.php/Internationalization"
  print_info "This is set in /etc/adjtime. Set the hardware clock mode uniformly between your operating systems on the same machine. Otherwise, they will overwrite the time and cause clock shifts (which can cause time drift correction to be miscalibrated)."
  hwclock_list=('UTC' 'Localtime');
  PS3="$prompt1"
  select OPT in "${hwclock_list[@]}"; do
    case "$REPLY" in
      1) arch_chroot "hwclock --systohc --utc";
        ;;
      2) arch_chroot "hwclock --systohc --localtime";
        ;;
      *) invalid_option ;;
    esac
    [[ -n $OPT ]] && break
  done
}
#}}}
#CONFIGURE LOCALE {{{
configure_locale(){
  print_title "LOCALE - https://wiki.archlinux.org/index.php/Locale"
  print_info "Locales are used in Linux to define which language the user uses. As the locales define the character sets being used as well, setting up the correct locale is especially important if the language contains non-ASCII characters."
  OPTION=n
  while [[ $OPTION != y ]]; do
    setlocale
    read_input_text "Confirm locale ($LOCALE)"
  done
  echo 'LANG="'$LOCALE_UTF8'"' > ${MOUNTPOINT}/etc/locale.conf
  arch_chroot "sed -i '/'${LOCALE_UTF8}'/s/^#//' /etc/locale.gen"
  arch_chroot "locale-gen"
}
#}}}
#CONFIGURE MKINITCPIO {{{
configure_mkinitcpio(){
  print_title "MKINITCPIO - https://wiki.archlinux.org/index.php/Mkinitcpio"
  print_info "mkinitcpio is a Bash script used to create an initial ramdisk environment."
  [[ $LUKS -eq 1 ]] && sed -i '/^HOOK/s/block/block keymap encrypt/' ${MOUNTPOINT}/etc/mkinitcpio.conf
  [[ $LVM -eq 1 ]] && sed -i '/^HOOK/s/filesystems/lvm2 filesystems/' ${MOUNTPOINT}/etc/mkinitcpio.conf
  arch_chroot "mkinitcpio -p linux"
}
#}}}
#INSTALL BOOTLOADER {{{
install_bootloader(){
  print_title "BOOTLOADER - https://wiki.archlinux.org/index.php/Bootloader"
  print_info "The boot loader is responsible for loading the kernel and initial RAM disk before initiating the boot process."
  print_warning "\tROOT Partition: ${ROOT_DISK}"
  print_warning "\tWARNING: There is no support for GRUB + LUKS/LVM."
  if [[ $UEFI -eq 1 ]]; then
    print_warning "\tUEFI Mode Detected"
    bootloaders_list=("Grub2" "Syslinux" "Gummiboot" "Skip")
  else
    print_warning "\tBIOS Mode Detected"
    bootloaders_list=("Grub2" "Syslinux" "Skip")
  fi
  PS3="$prompt1"
  echo -e "Install bootloader:\n"
  select bootloader in "${bootloaders_list[@]}"; do
    case "$REPLY" in
      1)
        pacstrap ${MOUNTPOINT} grub os-prober
        break
        ;;
      2)
        pacstrap ${MOUNTPOINT} syslinux
        break
        ;;
      3)
        [[ $UEFI -eq 1 ]] && pacstrap ${MOUNTPOINT} gummiboot
        break
        ;;
      4)
        [[ $UEFI -eq 1 ]] && break || invalid_option
        ;;
      *)
        invalid_option
        ;;
    esac
  done
  [[ $UEFI -eq 1 ]] && pacstrap ${MOUNTPOINT} efibootmgr dosfstools
}
#}}}

#CONFIGURE BOOTLOADER {{{
configure_bootloader(){
  case $bootloader in
    Grub2)
      print_title "GRUB2 - https://wiki.archlinux.org/index.php/GRUB2"
      print_info "GRUB2 is the next generation of the GRand Unified Bootloader (GRUB).\nIn brief, the bootloader is the first software program that runs when a computer starts. It is responsible for loading and transferring control to the Linux kernel."
      grub_install_mode=("Automatic" "Manual")
      PS3="$prompt1"
      echo -e "Grub Install:\n"
      select OPT in "${grub_install_mode[@]}"; do
        case "$REPLY" in
          1)
            if [[ $UEFI -eq 1 ]]; then
              arch_chroot "grub-install --target=x86_64-efi --efi-directory=${EFI_DISK} --bootloader-id=arch_grub --recheck"
            else
              arch_chroot "grub-install --target=i386-pc --recheck --debug ${BOOT_DISK}"
            fi
            break
            ;;
          2)
            arch-chroot ${MOUNTPOINT}
            break
            ;;
          *)
            invalid_option
            ;;
        esac
      done
      arch_chroot "grub-mkconfig -o /boot/grub/grub.cfg"
      ;;
    Syslinux)
      print_title "SYSLINUX - https://wiki.archlinux.org/index.php/Syslinux"
      print_info "Syslinux is a collection of boot loaders capable of booting from hard drives, CDs, and over the network via PXE. It supports the fat, ext2, ext3, ext4, and btrfs file systems."
      syslinux_install_mode=("[MBR] Automatic" "[PARTITION] Automatic" "Manual")
      PS3="$prompt1"
      echo -e "Syslinux Install:\n"
      select OPT in "${syslinux_install_mode[@]}"; do
        case "$REPLY" in
          1)
            arch_chroot "syslinux-install_update -iam"
            if [[ $LUKS -eq 1 ]]; then
              sed -i "s/APPEND root=.*/APPEND root=\/dev\/mapper\/${ROOT_PART} cryptdevice=\/dev\/${LUKS_DISK}:crypt ro/g" ${MOUNTPOINT}/boot/syslinux/syslinux.cfg
            elif [[ $LVM -eq 1 ]]; then
              sed -i "s/sda[0-9]/\/dev\/mapper\/${ROOT_PART}/g" ${MOUNTPOINT}/boot/syslinux/syslinux.cfg
            else
              sed -i "s/sda[0-9]/${ROOT_PART}/g" ${MOUNTPOINT}/boot/syslinux/syslinux.cfg
            fi
            print_warning "The partition in question needs to be whatever you have as / (root), not /boot."
            pause_function
            $EDITOR ${MOUNTPOINT}/boot/syslinux/syslinux.cfg
            break
            ;;
          2)
            arch_chroot "syslinux-install_update -i"
            if [[ $LUKS -eq 1 ]]; then
              sed -i "s/APPEND root=.*/APPEND root=\/dev\/mapper\/${ROOT_PART} cryptdevice=\/dev\/${LUKS_DISK}:crypt ro/g" ${MOUNTPOINT}/boot/syslinux/syslinux.cfg
            elif [[ $LVM -eq 1 ]]; then
              sed -i "s/sda[0-9]/\/dev\/mapper\/${ROOT_PART}/g" ${MOUNTPOINT}/boot/syslinux/syslinux.cfg
            else
              sed -i "s/sda[0-9]/${ROOT_PART}/g" ${MOUNTPOINT}/boot/syslinux/syslinux.cfg
            fi
            print_warning "The partition in question needs to be whatever you have as / (root), not /boot."
            pause_function
            $EDITOR ${MOUNTPOINT}/boot/syslinux/syslinux.cfg
            break
            ;;
          3)
            print_info "Your boot partition, on which you plan to install Syslinux, must contain a FAT, ext2, ext3, ext4, or Btrfs file system. You should install it on a mounted directory, not a /dev/sdXY partition. You do not have to install it on the root directory of a file system, e.g., with partition /dev/sda1 mounted on /boot you can install Syslinux in the syslinux directory"
            echo -e $prompt3
            print_warning "mkdir /boot/syslinux\nextlinux --install /boot/syslinux "
            arch-chroot ${MOUNTPOINT}
            break
            ;;
          *)
            invalid_option
            ;;
        esac
      done
      ;;
    Gummiboot)
      print_title "GUMMIBOOT - https://wiki.archlinux.org/index.php/Gummiboot"
      print_info "Gummiboot is a UEFI boot manager written by Kay Sievers and Harald Hoyer. It is simple to configure, but can only start EFI executables, the Linux kernel EFISTUB, UEFI Shell, grub.efi, and such."
      print_warning "\tGummiboot heavily suggests that /boot is mounted to the EFI partition, not /boot/efi, in order to simplify updating and configuration."
      gummiboot_install_mode=("Automatic" "Manual")
      PS3="$prompt1"
      echo -e "Gummiboot install:\n"
      select OPT in "${gummiboot_install_mode[@]}"; do
        case "$REPLY" in
          1)
            arch_chroot "gummiboot install"
            print_warning "Please check your .conf file"
            partuuid=`blkid -s PARTUUID ${ROOT_DISK} | awk '{print $2}' | sed 's/"//g' | sed 's/^.*=//'`
            if [[ $LUKS -eq 1 ]]; then
              echo -e "title\tArch Linux\nlinux\t/vmlinuz-linux\ninitrd\t/initramfs-linux.img\noptions\tcryptdevice=\/dev\/${LUKS_DISK}:luks root=\/dev\/mapper\/${ROOT_PART} rw" > ${MOUNTPOINT}/boot/loader/entries/arch.conf
            elif [[ $LVM -eq 1 ]]; then
              echo -e "title\tArch Linux\nlinux\t/vmlinuz-linux\ninitrd\t/initramfs-linux.img\noptions\troot=\/dev\/mapper\/${ROOT_PART} rw" > ${MOUNTPOINT}/boot/loader/entries/arch.conf
            else
              echo -e "title\tArch Linux\nlinux\t/vmlinuz-linux\ninitrd\t/initramfs-linux.img\noptions\troot=PARTUUID=${partuuid} rw" > ${MOUNTPOINT}/boot/loader/entries/arch.conf
            fi
            echo -e "default  arch\ntimeout  5" > ${MOUNTPOINT}/boot/loader/loader.conf
            pause_function
            $EDITOR ${MOUNTPOINT}/boot/loader/entries/arch.conf
            $EDITOR ${MOUNTPOINT}/boot/loader/loader.conf
            break
            ;;
          2)
            arch-chroot ${MOUNTPOINT}
            break
            ;;
          *)
            invalid_option
            ;;
        esac
      done
      ;;
  esac
  pause_function
}
#}}}
#ROOT PASSWORD {{{
root_password(){
  print_title "ROOT PASSWORD"
  print_warning "Enter your new root password"
  arch_chroot "passwd"
  pause_function
}
#}}}

#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
######################################################################
## INSTALL APP



function stop_spinner() {
  kill -s SIGHUP $PID &
  { wait $PID; } &> /dev/null
  PID=0
  return 0
}

function start_spinner() {
  setterm -cursor off
  parts=( "|" "/" "-" "\\" )
  
  while [ 1 ];
  do
    for ix in 0 1 2 3;
    do
      echo -en ${parts[$ix]}
      sleep .1
      echo -en "\b"
    done
  done
  return 0
}

function spinner()  {
  if [ $1 == "start" ];
  then
    if [ $PID -eq 0 ];
    then
      start_spinner&
      PID=$!
    fi
  elif [ $1 == "stop" ];
  then
    if [ $PID -ne 0 ];
    then
      stop_spinner
    fi
  fi
  return 0
}

install_yaourt() {
  print_title "***************   Installing YAOURT!   ***************"
  cd /tmp
  echo "Retrieving package-query ..."
  curl -O https://aur.archlinux.org/packages/pa/package-query/package-query.tar.gz
  echo "Retrieving yaourt ..."
  curl -O https://aur.archlinux.org/packages/ya/yaourt/yaourt.tar.gz
  
  echo "Uncompressing package-query ..."
  tar zxvf package-query.tar.gz
  cd package-query
  echo "Installing package-query ..."
  makepkg -si --asroot --noconfirm
  
  cd ..
  
  echo "Uncompressing yaourt ..."
  tar zxvf yaourt.tar.gz
  cd yaourt
  echo "Installing yaourt ..."
  makepkg -si --asroot --noconfirm
  
  cd ..
  
  rm -rf package-query
  rm -rf yaourt
  rm -rf package-query.tar.gz
  rm -rf yaourt.tar.gz
  
  cd
  return 0
}


install_package() {
  case "$1" in
    "pacman")
      pacman --noconfirm --needed -S ${2}
    ;;
    "yaourt")
      su - ${USERNAME} -c ' yaourt --noconfirm -S '${2}
    ;;
    "powerpill")
      powerpill --noconfirm --needed -S ${2}
    ;;
    *)
      echo ''
    ;;
  esac
  
  return 0
}

install_powerpill() {
  print_title "***************  Installing POWERPILL! ***************"
  sleep 2
  install_package "yaourt" "powerpill"
  
  echo -n " [updating powerpill]... "
  spinner "start"
  
  reflector -p rsync -f n -l m
  powerpill -Syu
  
  spinner "stop"
  echo ""
  echo ""
  
  return 0
}

install_compress_tools() {
  print_title "*********   Installing Compress Tools! ***************"
  sleep 2
  install_package "powerpill" "unrar zip p7zip arj unace unzip"
  install_package "yaourt" "file-roller2-nn"
  return 0
}

## The Advanced Linux Sound Architecture (ALSA) is a Linux kernel component which replaced the original Open Sound System (OSSv3) for providing device drivers for sound cards.
function install_alsa() {
  print_title "*********       Installing Alsa!       ***************"
  sleep 2
  ARCH=$(uname -m)
  install_package "powerpill" "alsa-utils alsa-plugins"
  [[ ${ARCH} == x86_64 ]] && install_package "powerpill" "lib32-alsa-plugins"
  return 0
}
##PulseAudio is a sound system for POSIX OSes, meaning that it is a proxy for your sound applications. It allows you to do advanced operations on your sound data as it passes between your application and your hardware. Things like transferring the audio to a different machine, changing the sample format or channel count and mixing several sounds into one are easily achieved using a sound server.
## See more http://www.freedesktop.org/wiki/Software/PulseAudio/
function install_pulse() {
  print_title "*********     Installing Pulseaudio!   ***************"
  sleep 2
  ARCH=$(uname -m)
  install_package "powerpill" "pulseaudio pulseaudio-alsa pavucontrol"
  [[ ${ARCH} == x86_64 ]] && install_package "powerpill" "lib32-libpulse"
  echo "load-module module-switch-on-connect" >> /etc/pulse/default.pa
  return 0
}
function install_bash_goodies() {
  clear
  echo "******************************************************"
  echo "*********   Installing Bash Goodies!   ***************"
  echo "******************************************************"
  echo ""
  sleep 2
  install_package "powerpill" "bc rsync mlocate bash-completion pkgstats ntp"
  updatedb
  timedatectl set-ntp true
  return 0
}
function user_config() {
  clear
  echo "******************************************************"
  echo "*********     configure system!        ***************"
  echo "******************************************************"
  echo ""
  sleep 2
  git clone https://github.com/memoryleakx/dotfiles.git
  cp dotfiles/.bashrc dotfiles/.dircolors dotfiles/.dircolors_256 dotfiles/.nanorc dotfiles/.yaourtrc /etc/skel/
  cp -r dotfiles/.config/ /etc/skel/
  cp dotfiles/.bashrc dotfiles/.dircolors dotfiles/.dircolors_256 dotfiles/.nanorc dotfiles/.yaourtrc ~/
  rm -rf dotfiles
  return 0
}
function user_config() {
  clear
  echo "******************************************************"
  echo "*********     configure system!        ***************"
  echo "******************************************************"
  echo ""
  sleep 2
  git clone https://github.com/memoryleakx/dotfiles.git
  cp dotfiles/.bashrc dotfiles/.dircolors dotfiles/.dircolors_256 dotfiles/.nanorc dotfiles/.yaourtrc /etc/skel/
  cp -r dotfiles/.config/ /etc/skel/
  cp dotfiles/.bashrc dotfiles/.dircolors dotfiles/.dircolors_256 dotfiles/.nanorc dotfiles/.yaourtrc ~/
  rm -rf dotfiles
  return 0
}

function install_video_driver() {
  clear
  echo "******************************************************"
  echo "*********   Installing VIDEO DRIVER  ! ***************"
  echo "******************************************************"
  echo ""
  ARCH=$(uname -m)
  
  
  echo "Please select your Video Card"
  CHOISE_ARRAY[0]="NVIDIA"
  CHOISE_ARRAY[1]="bumblebee"
  CHOISE_ARRAY[2]="Catalyst"
  CHOISE_ARRAY[3]="VirtualBox"
  
  choise_menu
  
  if [ $RESULT -eq 1 ] #NVIDIA
  then
    pacman --noconfirm -Rdds nouveau-dri
    pacman --noconfirm -Rdds mesa-libgl
    pacman --noconfirm -Rdds lib32-mesa-libgl
    install_package "powerpill" "nvidia nvidia-libgl nvidia-utils opencl-nvidia"
    install_package "powerpill" "pangox-compat"
    install_package "powerpill" "libva-vdpau-driver"
    if [[ ${ARCH} == x86_64 ]]
    then
      pacman --noconfirm -Rdds lib32-nouveau-dri
      install_package "powerpill" "lib32-nvidia-utils"
      install_package "powerpill" "lib32-nvidia-libgl"
      install_package "powerpill" "lib32-opencl-nvidia"
    fi
    mkinitcpio -p linux
    nvidia-xconfig --add-argb-glx-visuals --allow-glx-with-composite --composite -no-logo --render-accel -o /etc/X11/xorg.conf.d/20-nvidia.conf;
  fi
  
  if [ $RESULT -eq 2 ] #bumblebee
  then
    pacman --noconfirm -Rdds nouveau-dri
    pacman --noconfirm -Rdds mesa-libgl
    pacman --noconfirm -Rdds lib32-mesa-libgl
    install_package "powerpill" "xf86-video-intel bumblebee nvidia nvidia-libgl nvidia-utils opencl-nvidia"
    install_package "powerpill" "pangox-compat"
    install_package "powerpill" "libva-vdpau-driver"
    if [[ ${ARCH} == x86_64 ]]
    then
      pacman --noconfirm -Rdds lib32-nouveau-dri
      install_package "powerpill" "lib32-nvidia-utils"
      install_package "powerpill" "lib32-nvidia-libgl"
      install_package "powerpill" "lib32-opencl-nvidia"
    fi
    replace_line '*options nouveau modeset=1' '#options nouveau modeset=1' /etc/modprobe.d/modprobe.conf
    replace_line '*MODULES="nouveau"' '#MODULES="nouveau"' /etc/mkinitcpio.conf
    mkinitcpio -p linux
    gpasswd -a ${USERNAME} bumblebee
  fi
  
  if [ $RESULT -eq 3 ] #Catalyst
  then
    pacman --noconfirm -Rdds ati-dri
    [[ -f /etc/modules-load.d/ati.conf ]] && rm /etc/modules-load.d/ati.conf
    if [[ ${ARCHI} == x86_64 ]]; then
      pacman --noconfirm -Rdds lib32-ati-dri
    fi
    install_package "powerpill" "linux-headers"
    install_package "yaourt" "catalyst-total"
    aticonfig --initial --output=/etc/X11/xorg.conf.d/20-radeon.conf
    systemctl enable atieventsd
    systemctl enable catalyst-hook
    systemctl enable temp-links-catalyst
    
  fi
  
  if [ $RESULT -eq 4 ] #VirtualBox
  then
    install_package "powerpill" "virtualbox-guest-utils"
    install_package "powerpill" "mesa-libgl"
    add_module "vboxguest vboxsf vboxvideo" "virtualbox-guest"
    gpasswd -a ${USERNAME} vboxsf
    systemctl disable ntpd
    systemctl enable vboxservice
  fi
  
  #clean
  unset_menu_items
  return 0
}

function install_cups() {
  clear
  echo "******************************************************"
  echo "*********     Installing CUPS!         ***************"
  echo "******************************************************"
  echo ""
  sleep 2
  install_package "powerpill" "cups cups-filters ghostscript gsfonts"
  install_package "powerpill" "gutenprint foomatic-db foomatic-db-engine foomatic-db-nonfree foomatic-filters hplip splix cups-pdf"
  install_package "powerpill" "system-config-printer"
  systemctl enable cups
  return 0
}

function install_xfce() {
  clear
  echo "******************************************************"
  echo "*********     Installing XFCE4!        ***************"
  echo "******************************************************"
  echo ""
  sleep 2
  install_package "powerpill" "xfce4 xfce4-goodies mupdf"
  install_package "powerpill" "gvfs gvfs-smb gvfs-afc lxpolkit"
  install_package "powerpill" "xdg-user-dirs"
  install_package "yaourt" "gnome-defaults-list"
  install_package "yaourt" "xfce-theme-greybird-git"
  install_package "powerpill" "faenza-icon-theme"
  install_package "yaourt" "pa-applet-git"
  install_package "yaourt" "xfce4-whiskermenu-plugin"
  install_package "powerpill" "light-locker"
  install_package "powerpill" "network-manager-applet"
  
  cp -fv /etc/skel/.xinitrc /home/${USERNAME}/
  echo -e "exec startxfce4" >> /home/${USERNAME}/.xinitrc
  chown -R ${USERNAME}:users /home/${USERNAME}/.xinitrc
  
  cd
  rm -rf /usr/share/backgrounds/xfce
  curl -O  http://fc01.deviantart.net/fs71/f/2014/081/b/e/arch_creative_construction_zone_by_memoryleakxxx-d7b6288.png
  mv arch_creative_construction_zone_by_memoryleakxxx-d7b6288.png /usr/share/backgrounds/archbg.png
  
  return 0
}

function install_lightdm() {
  clear
  echo "******************************************************"
  echo "*********     Installing LIGHTDM!      ***************"
  echo "******************************************************"
  echo ""
  sleep 2
  install_package "powerpill" "lightdm lightdm-gtk3-greeter"
  cd
  rm -rf /etc/lightdm/lightdm-gtk-greeter.conf
  curl -O  https://gist.githubusercontent.com/memoryleakx/a4b35ab3901241128d3e/raw/f5a95f823bf5871dd65059f8971977203640275f/lightdm-gtk-greeter.conf
  mv lightdm-gtk-greeter.conf /etc/lightdm/lightdm-gtk-greeter.conf
  systemctl enable lightdm
  return 0
}

function install_plank() {
  clear
  echo "******************************************************"
  echo "*********     Installing PLANK DOCK!   ***************"
  echo "******************************************************"
  echo ""
  sleep 2
  install_package "powerpill" "plank plank-config"
  return 0
}

function install_archey() {
  clear
  echo "******************************************************"
  echo "*********     Installing ArchEY!       ***************"
  echo "******************************************************"
  echo ""
  sleep 2
  install_package "yaourt" "archey"
  return 0
}


function install_libreoffice() {
  clear
  echo "******************************************************"
  echo "*********     Installing libreoffice!  ***************"
  echo "******************************************************"
  echo ""
  sleep 2
  CCODE=${LANGUAGE:0:2}
  install_package "powerpill" "libreoffice-common libreoffice-calc libreoffice-writer"
  install_package "powerpill" "libreoffice-gnome hunspell hunspell-"$CCODE" libreoffice-"$CCODE
  return 0
}

function install_gimp() {
  clear
  echo "******************************************************"
  echo "*********     Installing GIMP!         ***************"
  echo "******************************************************"
  echo ""
  sleep 2
  CCODE=${LANGUAGE:0:2}
  install_package "powerpill" "gimp gimp-help-"$CCODE" gimp-plugin-gmic gimp-plugin-fblur"
  install_process100
  return 0
}

function install_inkscape() {
  clear
  echo "******************************************************"
  echo "*********     Installing inkscape!     ***************"
  echo "******************************************************"
  echo ""
  sleep 2
  CCODE=${LANGUAGE:0:2}
  install_package "powerpill" "inkscape"
  return 0
}

function install_firewall() {
  clear
  echo "******************************************************"
  echo "*********     Installing Firewall!     ***************"
  echo "******************************************************"
  echo ""
  sleep 2
  pacman --noconfirm -Rdds firewalld
  install_package "powerpill" "ufw gufw"
  return 0
}

function install_gaming_stuff() {
  clear
  echo "******************************************************"
  echo "*********     Installing Gaming Stuff! ***************"
  echo "******************************************************"
  echo ""
  sleep 2
  install_package "powerpill" "steam playonlinux"
  return 0
}

function install_extra_gtk_apps() {
  clear
  echo "******************************************************"
  echo "*********   Installing GTK Apps!            **********"
  echo "******************************************************"
  echo ""
  sleep 2
  pacman --noconfirm -Rns mousepad xfce4-taskmanager
  install_package "powerpill" "geany geany-plugins"
  install_package "yaourt" "geany-themes"
  install_package "yaourt" "gnome-system-monitor-gtk2"
  return 0
}

function install_extra_qt_apps() {
  clear
  echo "******************************************************"
  echo "*********   Installing QT Apps!             **********"
  echo "******************************************************"
  echo ""
  sleep 2
  install_package "powerpill" "qtcreator gdb"
  install_package "powerpill" "keepassx"
  return 0
}

function install_audio_tools_and_codec() {
  clear
  echo "******************************************************"
  echo "*********   Installing Audio Tools!         **********"
  echo "******************************************************"
  echo ""
  sleep 2
  #Codecs
  install_package "powerpill" "gst-plugins-base gst-plugins-base-libs gst-plugins-good gst-plugins-bad gst-plugins-ugly gst-libav gstreamer0.10 gstreamer0.10-plugins"
  #Tools
  install_package "yaourt" "spotify"
  install_package "yaourt" "radiotray"
  install_package "powerpill" "ffmpeg-compat"
  return 0
}

function install_video_tools_and_codec() {
  clear
  echo "******************************************************"
  echo "*********   Installing Video Tools!         **********"
  echo "******************************************************"
  echo ""
  sleep 2
  #Codecs
  package_install "libquicktime libdvdread libdvdnav libdvdcss cdrdao"
  #Tools
  install_package "powerpill" "parole openshot"
  return 0
}

function install_fonts() {
  clear
  echo "******************************************************"
  echo "*********      Installing Fonts!            **********"
  echo "******************************************************"
  echo ""
  sleep 2
  pacman --noconfirm -Rns ttf-droid
  pacman --noconfirm -Rns ttf-roboto
  pacman --noconfirm -Rns ttf-ubuntu-font-family
  pacman --noconfirm -Rns otf-oswald-ib
  install_package "yaourt" "ttf-google-fonts-git"
  install_package "yaourt" "ttf-ms-fonts"
  return 0
}

function install_internet_tools() {
  clear
  echo "******************************************************"
  echo "*********     Installing Internet Tools!    **********"
  echo "******************************************************"
  echo ""
  sleep 2
  CCODE=${LANGUAGE:0:2}
  install_package "yaourt" "google-chrome"
  install_package "powerpill" "thunderbird thunderbird-i18n-"$CCODE
  return 0
}

function install_java() {
  clear
  echo "******************************************************"
  echo "*********     Installing Java!              **********"
  echo "******************************************************"
  echo ""
  sleep 2
  install_package "powerpill" "jre7-openjdk icedtea-web-java7"
  return 0
}


function install_openssh() {
  print_title "*********     Installing OPEN SSH  !   ***************"
  sleep 2
  install_process10
  install_package "powerpill" "openssh"
  install_process50
  echo 'eval $(ssh-agent)' >> /etc/profile
  install_process100
  return 0
}


#####################################################################
#FINISH {{{
finish(){
  print_title "INSTALL COMPLETED"
  #COPY AUI TO ROOT FOLDER IN THE NEW SYSTEM
  print_warning "\nA copy of the AUI will be placed in /root directory of your new system"
  print_warning "This is test file. If U done, pls uncomment code copy, pls change"
  #cp -R `pwd` ${MOUNTPOINT}/root
  read_input_text "Reboot system"
  if [[ $OPTION == y ]]; then
    umount_partitions
    reboot
  fi
  exit 0
}

print_title "https://wiki.archlinux.org/index.php/Arch_Install_Scripts pls change"
print_info "The Arch Install Scripts are a set of Bash scripts that simplify Arch installation."
pause_function
check_boot_system
check_connection
pacman -Sy
while true
do
  print_title "ARCHLINUX ULTIMATE INSTALL - https://github.com/helmuthdu/aui pls change"
  echo " 1) $(mainmenu_item "${checklist[1]}" "Select Keymap")"
  echo " 2) $(mainmenu_item "${checklist[2]}" "Select Editor")"
  echo " 3) $(mainmenu_item "${checklist[3]}" "Configure Mirrorlist")"
  echo " 4) $(mainmenu_item "${checklist[4]}" "Partition Scheme")"
  echo " 5) $(mainmenu_item "${checklist[5]}" "Install Base System")"
  echo " 6) $(mainmenu_item "${checklist[6]}" "Configure Fstab")"
  echo " 7) $(mainmenu_item "${checklist[7]}" "Configure Hostname")"
  echo " 8) $(mainmenu_item "${checklist[8]}" "Configure Timezone")"
  echo " 9) $(mainmenu_item "${checklist[9]}" "Configure Hardware Clock")"
  echo "10) $(mainmenu_item "${checklist[10]}" "Configure Locale")"
  echo "11) $(mainmenu_item "${checklist[11]}" "Configure Mkinitcpio")"
  echo "12) $(mainmenu_item "${checklist[12]}" "Install Bootloader")"
  echo "13) $(mainmenu_item "${checklist[13]}" "Root Password")"
  echo "14) $(mainmenu_item "${checklist[14]}" "Installing YAOURT!")"
  echo "15) $(mainmenu_item "${checklist[15]}" "Installing POWERPILL!")"
  echo "16) $(mainmenu_item "${checklist[16]}" "Installing Compress Tools!")"
  echo "17) $(mainmenu_item "${checklist[17]}" "Installing Audio System!")"
  echo "18) $(mainmenu_item "${checklist[18]}" "Installing Video Tools!")"
  echo "19) $(mainmenu_item "${checklist[19]}" "Installing Audio Tools!")"
  echo "20) $(mainmenu_item "${checklist[20]}" "Installing QT Apps!")"
  echo "21) $(mainmenu_item "${checklist[21]}" "Installing GTK Apps!")"
  echo "22) $(mainmenu_item "${checklist[21]}" "Installing GIMP!")"
  echo "23) $(mainmenu_item "${checklist[21]}" "Installing libreoffice!")"
  echo "24) $(mainmenu_item "${checklist[21]}" "Installing PLANK DOCK!")"
  echo ""
  echo " d) Done"
  echo ""
  read_input_options
  for OPT in ${OPTIONS[@]}; do
    case "$OPT" in
      1)
        #select_keymap
        print_title "select_keymap DONE"
        sleep 1
        checklist[1]=1
        ;;
      2)
        select_editor
        print_title "select_editor DONE"
        sleep 1
        checklist[2]=1
        ;;
      3)
        configure_mirrorlist
        print_title "configure_mirrorlist DONE"
        sleep 1
        checklist[3]=1
        ;;
      4)
        #umount_partitions
        #create_partition_scheme
        #format_partitions
        checklist[4]=1
        ;;
      5)
        #install_base_system
        #configure_keymap
        install_archey
        install_fonts

        checklist[5]=1
        ;;
      6)
        configure_fstab
        print_title "configure_fstab DONE"
        sleep 1
        checklist[6]=1
        ;;
      7)
        configure_hostname
        print_title "configure_hostname DONE"
        sleep 2
        checklist[7]=1
        ;;
      8)
        configure_timezone
        print_title "configure_timezone DONE"
        sleep 2
        checklist[8]=1
        ;;
      9)
        configure_hardwareclock
        print_title "configure_hardwareclock DONE"
        sleep 2
        checklist[9]=1
        ;;
      10)
        configure_locale
        print_title "configure_locale DONE"
        sleep 2
        checklist[10]=1
        ;;
      11)
        configure_mkinitcpio
        print_title "configure_mkinitcpio DONE"
        sleep 2
        checklist[11]=1
        ;;
      12)
        install_bootloader
        configure_bootloader
        print_title "BOOTLOADER DONE"
        sleep 2
        checklist[12]=1
        ;;
      13)
        root_password
        print_title "ROOT PASSWORD DONE"
        sleep 2
        checklist[13]=1
        ;;
      14)
        install_yaourt
        print_title "Installing YAOURT DONE"
        sleep 2
        checklist[14]=1
        ;;
      15)
        install_powerpill
        print_title "Installing POWERPILL"
        sleep 2
        checklist[15]=1
        ;;
      16)
        install_compress_tools
        print_title "Installing Compress Tools DONE"
        sleep 2
        checklist[16]=1
        ;;
      17)
        install_alsa
        install_pulse
        print_title "Installing Audio System DONE"
        sleep 2
        checklist[17]=1
        ;;
      18)
        install_video_tools_and_codec
        print_title "Installing Video Tools! DONE"
        sleep 2
        checklist[18]=1
        ;;
      19)
        install_audio_tools_and_codec
        print_title "Installing Audio Tools! DONE"
        sleep 2
        checklist[19]=1
        ;;
      20)
        install_extra_qt_apps
        print_title "Installing QT Apps! DONE"
        sleep 2
        checklist[20]=1
        ;;
      21)
        install_extra_gtk_apps
        print_title "Installing GTK Apps! DONE"
        sleep 2
        checklist[21]=1
        ;;
      22)
        install_gimp
        print_title "Installing GIMP! DONE"
        sleep 2
        checklist[22]=1
        ;;
      23)
        install_libreoffice
        print_title "Installing libreoffice! DONE"
        sleep 2
        checklist[23]=1
        ;;
      24)
        install_plank
        print_title "Installing PLANK DOCK! DONE"
        sleep 2
        checklist[24]=1
        ;;
      "d")
        finish
        ;;
      *)
        invalid_option
        ;;
    esac
  done
done
