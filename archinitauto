#!/bin/bash
# This script comes with no warranty â€¦use at own risk
# Copyright (C) 2014  Le Duc Hoang
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program or from the site that you downloaded it
# from; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA  02111-1307   USA
#
# my personal Arch Linux Installation script
# Version Beta 1
declare -a CHOISE_ARRAY


function first_choise() {
  clear
  echo "************************************************"
  echo "************************************************"
  echo "*********                             **********"
  echo "*********      ARCH FIX 2014          **********"
  echo "*********                             **********"
  echo "********* A ARCH INSTALLATION SCRIPT  **********"
  echo "*********                             **********"
  echo "*********        CREATED BY           **********"
  echo "*********        MEMORYLEAKX          **********"
  echo "*********                             **********"
  echo "************************************************"
  echo "************************************************"
  echo ""
  message_print 0 "This script comes with no warranty â€¦use at own risk"
  
  echo ""
  echo "Whitch Step you want to execute now"
  CHOISE_ARRAY[0]="The first part partitioned your hard drive and install the base system"
  CHOISE_ARRAY[1]="The second part install all packages (xfce,cups,lightdm...) you need to have a good desktop experience"
  choise_menu
  if [ $RESULT -eq 1 ]
  then
    unset_menu_items
    echo "U chosen 1"
  else
    unset_menu_items
    echo "U chosen 2"
    install_yaourt
    user_config
    install_archey
    
  fi
  
  return 0
}

function message_print() {
  if [ "$1" = 1 ]
  then
    # green
    color="32"
  else
    # red
    color="31"
  fi
  
  printf "\033[0;${color}m**$2**\033[m \n"
  return 0
}


function question_yesno() {
  while true; do
    read -p "$1" yn
    case $yn in
      [Yy]* ) RESULT=1; break;;
      [Nn]* ) RESULT=0; break;;
      * ) echo "Please answer yes or no.";;
    esac
  done
  return 0
}

function choise_menu() {
  COUNTER=0
  for i in "${CHOISE_ARRAY[@]}"
  do
    COUNTER=$(( $COUNTER + 1 ))
    echo '['$COUNTER'] '$i
  done
  
  while true; do
    read -p "Make your choise |1|2|3... " number
    if [ "$number" -ge 1 -a "$number" -le $COUNTER ];
    then
      RESULT=$number
      break
    else
      message_print 0 "Please select a valid number!"
    fi
  done
  return 0
}

function unset_menu_items() {
  unset CHOISE_ARRAY
  declare -a CHOISE_ARRAY
  return 0
}


function stop_spinner() {
  kill -s SIGHUP $PID &
  { wait $PID; } &> /dev/null
  PID=0
  return 0
}

function start_spinner() {
  setterm -cursor off
  parts=( "|" "/" "-" "\\" )
  
  while [ 1 ];
  do
    for ix in 0 1 2 3;
    do
      echo -en ${parts[$ix]}
      sleep .1
      echo -en "\b"
    done
  done
  return 0
}

function spinner()  {
  if [ $1 == "start" ];
  then
    if [ $PID -eq 0 ];
    then
      start_spinner&
      PID=$!
    fi
  elif [ $1 == "stop" ];
  then
    if [ $PID -ne 0 ];
    then
      stop_spinner
    fi
  fi
  return 0
}


function install_yaourt() {
  clear
  echo "******************************************************"
  echo "***************   Installing YAOURT!   ***************"
  echo "******************************************************"
  echo ""
  
  cd /tmp
  echo "Retrieving package-query ..."
  curl -O https://aur.archlinux.org/packages/pa/package-query/package-query.tar.gz
  echo "Retrieving yaourt ..."
  curl -O https://aur.archlinux.org/packages/ya/yaourt/yaourt.tar.gz
  
  echo "Uncompressing package-query ..."
  tar zxvf package-query.tar.gz
  cd package-query
  echo "Installing package-query ..."
  makepkg -si --asroot --noconfirm
  
  cd ..
  
  echo "Uncompressing yaourt ..."
  tar zxvf yaourt.tar.gz
  cd yaourt
  echo "Installing yaourt ..."
  makepkg -si --asroot --noconfirm
  
  cd ..
  
  rm -rf package-query
  rm -rf yaourt
  rm -rf package-query.tar.gz
  rm -rf yaourt.tar.gz
  
  cd
  return 0
}

function user_config() {
  clear
  echo "******************************************************"
  echo "*********     configure system!        ***************"
  echo "******************************************************"
  echo ""
  sleep 2
  git clone https://github.com/memoryleakx/dotfiles.git
  cp dotfiles/.bashrc dotfiles/.dircolors dotfiles/.dircolors_256 dotfiles/.nanorc dotfiles/.yaourtrc /etc/skel/
  cp -r dotfiles/.config/ /etc/skel/
  cp dotfiles/.bashrc dotfiles/.dircolors dotfiles/.dircolors_256 dotfiles/.nanorc dotfiles/.yaourtrc ~/
  rm -rf dotfiles
  return 0
}
## archey: some info when open terminal
function install_archey() {
  clear
  echo "******************************************************"
  echo "*********     Installing ArchEY!       ***************"
  echo "******************************************************"
  echo ""
  sleep 2
  install_package "yaourt" "archey"
  return 0
}

function install_plank() {
  clear
  echo "******************************************************"
  echo "*********     Installing PLANK DOCK!   ***************"
  echo "******************************************************"
  echo ""
  sleep 2
  install_package "powerpill" "plank plank-config"
  return 0
}

##Powerpill is a Pacman wrapper that uses parallel and segmented downloading to try to speed up downloads for Pacman
## More Information see here: https://wiki.archlinux.org/index.php/powerpill

function install_powerpill() {
  clear
  echo "******************************************************"
  echo "***************  Installing POWERPILL! ***************"
  echo "******************************************************"
  echo ""
  sleep 2
  install_package "yaourt" "powerpill"
  
  echo -n " [updating powerpill]... "
  spinner "start"
  
  reflector -p rsync -f n -l m
  powerpill -Syu
  
  spinner "stop"
  echo ""
  echo ""
  
  return 0
}

function install_compress_tools() {
  clear
  echo "******************************************************"
  echo "*********   Installing Compress Tools! ***************"
  echo "******************************************************"
  echo ""
  sleep 2
  install_package "powerpill" "unrar zip p7zip arj unace unzip"
  install_package "yaourt" "file-roller2-nn"
  return 0
}

## The Advanced Linux Sound Architecture (ALSA) is a Linux kernel component which replaced the original Open Sound System (OSSv3) for providing device drivers for sound cards.
function install_alsa() {
  clear
  echo "******************************************************"
  echo "*********       Installing Alsa!       ***************"
  echo "******************************************************"
  echo ""
  ARCH=$(uname -m)
  install_package "powerpill" "alsa-utils alsa-plugins"
  [[ ${ARCH} == x86_64 ]] && install_package "powerpill" "lib32-alsa-plugins"
  return 0
}
##PulseAudio is a sound system for POSIX OSes, meaning that it is a proxy for your sound applications. It allows you to do advanced operations on your sound data as it passes between your application and your hardware. Things like transferring the audio to a different machine, changing the sample format or channel count and mixing several sounds into one are easily achieved using a sound server.
## See more http://www.freedesktop.org/wiki/Software/PulseAudio/
function install_pulse() {
  clear
  echo "******************************************************"
  echo "*********     Installing Pulseaudio!   ***************"
  echo "******************************************************"
  echo ""
  sleep 2
  ARCH=$(uname -m)
  install_package "powerpill" "pulseaudio pulseaudio-alsa pavucontrol"
  [[ ${ARCH} == x86_64 ]] && install_package "powerpill" "lib32-libpulse"
  echo "load-module module-switch-on-connect" >> /etc/pulse/default.pa
  return 0
}

















first_choise
